(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{686:function(s,o,e){"use strict";e.r(o);var i=e(2),t=Object(i.a)({},(function(){var s=this,o=s.$createElement,e=s._self._c||o;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"cookie和session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session"}},[s._v("#")]),s._v(" Cookie和Session")]),s._v(" "),e("h3",{attrs:{id:"简述-cookie和session的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简述-cookie和session的区别"}},[s._v("#")]),s._v(" 简述： Cookie和Session的区别")]),s._v(" "),e("p",[s._v("1、"),e("strong",[s._v("位置：")]),s._v(" Cookie存储在客户端，Session存储在服务端。")]),s._v(" "),e("p",[s._v("2、"),e("strong",[s._v("安全性：")]),s._v(" Cookie存储在客户端，比较容易遭到其他用户不法获取和解析，早期有人将用户的登录名和密码存储在Cookie中导致信息被窃取；而Session存储在服务端，安全性相对Cookie要好一些。")]),s._v(" "),e("p",[s._v("3、"),e("strong",[s._v("容量：")]),s._v(" Cookie保存的数据不能超过4k，数量有限（数量根据浏览器而定），Session可存储的数据远大于Cookie。")]),s._v(" "),e("p",[s._v("4、"),e("strong",[s._v("存储类型：")]),s._v(" Cookie只能存储字符串，Session可存储任意数据类型。")]),s._v(" "),e("p",[s._v("5、"),e("strong",[s._v("有效时间：")]),s._v(" Cookie可设置长时间有效，Session有效时间较短，客户端关闭或者session超时都会失效。")]),s._v(" "),e("h3",{attrs:{id:"内容详细介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容详细介绍"}},[s._v("#")]),s._v(" 内容详细介绍")]),s._v(" "),e("h4",{attrs:{id:"介绍-协议无状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍-协议无状态"}},[s._v("#")]),s._v(" 介绍（协议无状态）")]),s._v(" "),e("p",[s._v("1、协议对于事务处理没有记忆能力。")]),s._v(" "),e("p",[s._v("2、对同一个"),e("code",[s._v("url")]),s._v("请求没有上下文关系。")]),s._v(" "),e("p",[s._v("3、每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况。")]),s._v(" "),e("p",[s._v("4、服务器中没有保存客户端的状态，客户端必须每次带上自己的状态去请求服务器。")]),s._v(" "),e("h4",{attrs:{id:"cookie和session-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session-2"}},[s._v("#")]),s._v(" Cookie和Session")]),s._v(" "),e("p",[s._v("由于"),e("code",[s._v("HTTP")]),s._v("是无状态的协议，每个请求都是独立的，服务端就无法确认当前访问者的身份信息。因此，服务器与浏览器为了进行会话跟踪，就必须主动的去维护这一个状态，利用这个状态便于服务端区分前后两个请求是否来自同一用户。而这个状态需要通过"),e("code",[s._v("cookie")]),s._v("或者"),e("code",[s._v("session")]),s._v("去实现。")]),s._v(" "),e("h4",{attrs:{id:"cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" Cookie")]),s._v(" "),e("p",[s._v("字段属性")]),s._v(" "),e("p",[s._v("NAME: cookie的名字。")]),s._v(" "),e("p",[s._v("VALUE: cookie的值。")]),s._v(" "),e("p",[s._v("Expires/Max-Age: cookie的超时时间。")]),s._v(" "),e("p",[s._v("Path: cookie作用的路径。")]),s._v(" "),e("p",[s._v("Domain: cookie作用的域名。")]),s._v(" "),e("p",[s._v("HttpOnly：若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。")]),s._v(" "),e("p",[s._v("SECURE: 设置是否只能通过https来传递此条cookie。")]),s._v(" "),e("h4",{attrs:{id:"session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" Session")]),s._v(" "),e("p",[s._v("Session代表着客户端和服务端的一次会话的过程。Session用于对象存储用户会话所需的属性及配置信息。当客户端关闭会话或者Session超时失效时会话结束。")]),s._v(" "),e("h4",{attrs:{id:"cookie和session交互流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session交互流程"}},[s._v("#")]),s._v(" Cookie和Session交互流程")]),s._v(" "),e("blockquote",[e("p",[s._v("以登录为例")])]),s._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://markdown-1301775995.cos.ap-nanjing.myqcloud.com/image-20210322000007134.png",alt:"image-20210322000007134"}}),s._v(" "),e("p",[s._v("1、客户端第一次请求服务器，服务器根据用户的请求信息，创建Session记录登录信息。响应客户端请求时将刚刚创建的Session的SessionId（标识唯一session）一并返回。")]),s._v(" "),e("p",[s._v("2、客户端接收到服务端返回的SessionId，将其存入Cookie中。")]),s._v(" "),e("p",[s._v("3、客户端再次访问服务器时，服务端判断此域名下的Cookie信息，如果有则取出SessionId，根据此SessionId获取对应的Session信息，如果存在则该用户已经登录，否则没有登录或登录信息过期了。")])])}),[],!1,null,null,null);o.default=t.exports}}]);