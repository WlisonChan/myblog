(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{735:function(a,t,v){"use strict";v.r(t);var r=v(2),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h4",{attrs:{id:"jvm分区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm分区"}},[a._v("#")]),a._v(" JVM分区")]),a._v(" "),v("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://markdown-1301775995.cos.ap-nanjing.myqcloud.com/image-20210227164428930.png",alt:"image-20210227164428930"}}),a._v(" "),v("h5",{attrs:{id:"简述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简述"}},[a._v("#")]),a._v(" 简述：")]),a._v(" "),v("ul",[v("li",[v("strong",[a._v("程序计数器：")]),a._v(" 是当前线程所执行的行号指示器")]),a._v(" "),v("li",[v("strong",[a._v("虚拟机栈：")]),a._v(" 每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、和方法返回地址等信息。")]),a._v(" "),v("li",[v("strong",[a._v("本地方法栈：")]),a._v(" 本地方法栈和虚拟机栈类似，只不过本地方法栈为虚拟机使用本地方法（native）服务。")]),a._v(" "),v("li",[v("strong",[a._v("堆：")]),a._v(" java堆是所有线程共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收。")]),a._v(" "),v("li",[v("strong",[a._v("方法区：")]),a._v(" 用于存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")])]),a._v(" "),v("h5",{attrs:{id:"详细介绍-内容主要来自周志明的《深入了解java虚拟机》"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#详细介绍-内容主要来自周志明的《深入了解java虚拟机》"}},[a._v("#")]),a._v(" 详细介绍（内容主要来自周志明的《深入了解JAVA虚拟机》）")]),a._v(" "),v("h6",{attrs:{id:"_1、程序计数器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、程序计数器"}},[a._v("#")]),a._v(" 1、程序计数器")]),a._v(" "),v("blockquote",[v("p",[a._v("程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。")])]),a._v(" "),v("blockquote",[v("p",[a._v("由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。")])]),a._v(" "),v("blockquote",[v("p",[a._v("如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。"),v("strong",[a._v("此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。")])])]),a._v(" "),v("h6",{attrs:{id:"_2-、java虚拟机栈"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-、java虚拟机栈"}},[a._v("#")]),a._v(" 2 、Java虚拟机栈")]),a._v(" "),v("blockquote",[v("p",[a._v("每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、和方法返回地址等信息。")])]),a._v(" "),v("blockquote",[v("p",[a._v("虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。")])]),a._v(" "),v("blockquote",[v("p",[a._v("局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。")])]),a._v(" "),v("h6",{attrs:{id:"_3、本地方法栈"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、本地方法栈"}},[a._v("#")]),a._v(" 3、本地方法栈")]),a._v(" "),v("blockquote",[v("p",[a._v("本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。")])]),a._v(" "),v("h6",{attrs:{id:"_4、堆"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、堆"}},[a._v("#")]),a._v(" 4、堆")]),a._v(" "),v("blockquote",[v("p",[a._v("java堆是所有线程共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收。")])]),a._v(" "),v("blockquote",[v("p",[a._v("Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。")])]),a._v(" "),v("h6",{attrs:{id:"_5、方法区"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、方法区"}},[a._v("#")]),a._v(" 5、方法区")]),a._v(" "),v("blockquote",[v("p",[a._v("用于存放已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")])]),a._v(" "),v("blockquote",[v("p",[a._v("方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);