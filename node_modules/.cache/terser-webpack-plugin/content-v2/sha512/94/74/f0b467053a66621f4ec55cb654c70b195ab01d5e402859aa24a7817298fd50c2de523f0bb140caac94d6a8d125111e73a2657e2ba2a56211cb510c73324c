{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{736:function(n,r,t){\"use strict\";t.r(r);var o=t(2),e=Object(o.a)({},(function(){var n=this,r=n.$createElement,t=n._self._c||r;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"h4\",{attrs:{id:\"spring-ioc-inversion-of-control\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-ioc-inversion-of-control\"}},[n._v(\"#\")]),n._v(\" Spring IOC (Inversion of Control)\")]),n._v(\" \"),t(\"p\",[n._v(\"控制反转，是指\"),t(\"strong\",[n._v(\"创建对象的控制权的转移\")]),n._v(\"，以前创建对象的主动权和时机由自己把控，而现在这种权利\"),t(\"strong\",[n._v(\"转移到Spring容器\")]),n._v(\"中，并\"),t(\"strong\",[n._v(\"由容器根据配置文件去创建实例和管理各个实例之间的依赖关系，对象与对象之间松散耦合，也利于功能的复用\")]),n._v(\"。DI依赖注入，和控制反转是同一个概念的不同角度的描述，即应用\"),t(\"strong\",[n._v(\"程序在运行时依赖IOC容器来动态注入对象需要的外部资源。\")])]),n._v(\" \"),t(\"p\",[n._v(\"最直观的表达就是，IOC让对象的创建不用去new了，可以由Spring自动生产，使用java的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法。\")]),n._v(\" \"),t(\"p\",[t(\"strong\",[n._v(\"依赖注入的三种方式：\")])]),n._v(\" \"),t(\"p\",[n._v(\"1、属性注入：通过 setter 方法注入Bean 的属性值或依赖的对象\")]),n._v(\" \"),t(\"p\",[n._v(\"2、构造器注入：通过构造方法注入Bean 的属性值或依赖的对象，它保证了 Bean 实例在实例化后就可以使用\")]),n._v(\" \"),t(\"p\",[n._v(\"3、接口注入：被注入对象如果想要IoC为其注入依赖对象，就必须实现某个接口，接口提供方法来为其注入依赖对象。\")]),n._v(\" \"),t(\"h4\",{attrs:{id:\"spring-aop-aspect-oriented-programming\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-aop-aspect-oriented-programming\"}},[n._v(\"#\")]),n._v(\" Spring AOP (Aspect-Oriented Programming)\")]),n._v(\" \"),t(\"p\",[t(\"strong\",[n._v(\"AOP，\")]),n._v(\" 一般称为面向切面，作为面向对象的一种补充，\"),t(\"strong\",[n._v(\"用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”\")]),n._v(\"（Aspect），\"),t(\"strong\",[n._v(\"减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理。\")])]),n._v(\" \"),t(\"p\",[t(\"strong\",[n._v(\"Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：\")])]),n._v(\" \"),t(\"p\",[n._v(\"1.JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务逻辑编辑在一起；接着，Proxy利用InvocationHandler动态创建一个符合某一接口的实例，生成目标类的代理对象。\")]),n._v(\" \"),t(\"p\",[n._v(\"2.如果代理类没有实现InvocationHandler接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB(Code Generation Library)，是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。\")]),n._v(\" \"),t(\"p\",[n._v(\"（3）静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而Spring AOP则无需特定的编译器处理。\")]),n._v(\" \"),t(\"p\",[n._v(\"InvocationHandler的invoke(Object proxy,Method method,Object[] args): proxy是最终生成的代理实例；method是被代理目标实例的某个具体方法；args是被代理目标实例某个方法的具体入参，在方法反射调用时使用。\")])])}),[],!1,null,null,null);r.default=e.exports}}]);","extractedComments":[]}