{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{733:function(s,t,a){\"use strict\";a.r(t);var l=a(2),n=Object(l.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"h4\",{attrs:{id:\"jvm类加载机制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm类加载机制\"}},[s._v(\"#\")]),s._v(\" JVM类加载机制\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://markdown-1301775995.cos.ap-nanjing.myqcloud.com/image-20210227171349060.png\",alt:\"image-20210227171349060\"}})]),s._v(\" \"),a(\"p\",[s._v(\"虚拟机加载\"),a(\"code\",[s._v(\".class\")]),s._v(\"文件的过程有：加载、连接、初始化、使用、卸载。连接又分为三个阶段：验证、准备、解析。最终形成可以被虚拟机识别的Class对象。\\n首先虚拟机把.class文件加载到内存，类加载器通过类的全限定名来获取类的二进制字节流，获取到字节流后，会将字节流的信息转化为方法区中的运行时数据结构，在内存中生成代表该类的Class对象，作为访问该类的数据入口。\\n1、验证：验证的目的在于确保Class文件的字节流中包含的信息符合当前虚拟机要求，不会危害虚拟机自身安全。包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证。\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"文件格式验证：验证字节流是否符合Class文件格式规范，并且能被当前的虚拟机加载处理\")]),s._v(\" \"),a(\"li\",[s._v(\"元数据验证：对字节码描述的信息进行语义的分析，分析是否符合java的语言语法的规范。\")]),s._v(\" \"),a(\"li\",[s._v(\"字节码验证：分析数据流和控制，确定语义是合法的，符合逻辑的。\")]),s._v(\" \"),a(\"li\",[s._v(\"符号引用验证：保证引用一定会被访问到，不会出现类等无法访问的问题。\")])]),s._v(\" \"),a(\"p\",[s._v(\"2、准备：为类的静态变量分配内存，并初始化为默认值\\n3、解析：将类中的符号引用转化为直接引用。\\n4、初始化：为类的静态变量赋值，与连接的准备阶段的不同。\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}